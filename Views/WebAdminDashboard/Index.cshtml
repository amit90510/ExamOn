
@{
    ViewBag.Title = "ExamOn - Web Admin";
}
<a class="btn btn-danger" href="~/signout"> Logout from web admin?</a>
<hr />
<span>All tenants subscriptions - <button onclick="exportToExcel()" class="gj-button-md">Download</button></span>
<table id="gridSubscptionEnd" class="table table-striped table-sm table-responsive-sm">
</table>

<hr />
<div class="input-group container" error-For="Tenant">
    <select style="cursor:pointer" id="txtTenant" class="form-select js-example-basic-single" onchange="OnTenantCHange(this)">
        <option>Choose...</option>
    </select>
</div>
<br />
<hr />
<div class="row" id="accordionFlushExample">
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-dark bg-warning text-center">
                Update Tenant (you can perform this operation once you have create tenant DB and a recordin tenant Master table)
            </div>
            <div class="card-body">
                Tenant ID
                <input type="text" class="form-control" id="txtTenantId" placeholder="tenant ID (can not be changed)" readonly="readonly" style="background-color:grey !important">
                Tenant Name
                <input type="text" class="form-control" id="txtTenantName" placeholder="tenant Name">
                Address
                <input type="text" class="form-control" id="txtAddress" placeholder="tenant Address">
                Mobile
                <input type="number" class="form-control" id="txtTenantMobile" placeholder="tenant Mobile">
                Email
                <input type="text" class="form-control" id="txtTenantEMail" placeholder="tenant Email">
                Subscription  End date
                <input type="text" class="form-control" readonly="readonly" id="txtSubscriptionENdDate" placeholder="Subcription end Date" width="312">

                Subscription End Message
                <input type="text" class="form-control" id="txtTenantsubscriptionEndMessage" placeholder="tenant subscription end message">
                Last Recharge Amount
                <input type="number" class="form-control" id="txtTenantLastRecharge" placeholder="Last Recharge Amount">
                <br />
            </div>
            <div class="card-footer text-muted ">
                <button class="btn btn-success" onclick="UpdateTenant()">Update</button>
                <button class="btn btn-success" onclick="UpdateTenant(this)">Update and Email</button>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-white bg-danger text-center">
                Create Logins
            </div>
            <div class="card-body">
                <select style="cursor:pointer" id="txtloginType" class="form-select" onchange="">
                    <option>Choose login type...</option>
                </select>
                <br />
                <input class="form-check-input" type="checkbox" value="" id="chkUseCustomUserName">
                <label class="form-check-label" for="chkUseCustomUserName">
                    Use my Custom UserName
                </label>
                <br />
                UserName (this will be auto picked by system as per tenent ID, you can change but make sure to add prefix (tenantID-))
                <input type="text" class="form-control" id="txtNewUserName" placeholder="Username (this is readonly)" style="background-color:grey !important">
                <br />
                Profile Name (mendatory)
                <input type="text" class="form-control" id="txtProfileName" placeholder="Profile Name" maxlength="50">
                <br />
                Password (mendatory)
                <input type="text" class="form-control" id="txtUserPasssword" placeholder="User Password" maxlength="50">
                <br />
                Email (mendatory)
                <input type="email" class="form-control" id="txtUserEMail" placeholder="User Email" maxlength="100">
                <br />
            </div>
            <div class="card-footer text-muted">
                <button class="btn btn-success" onclick="CreateLogin()">Create</button>
                <button class="btn btn-success" onclick="CreateLogin(this)">Create and Email</button>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-white bg-danger text-center">
                Update Email Credientials
            </div>
            <div class="card-body">
                Email From Address
                <input type="email" class="form-control" id="txtNewEMailFromAddress" placeholder="Email From Address" maxlength="50">
                <br />
                Password (mendatory)
                <input type="text" class="form-control" id="txtUserEmailPasssword" placeholder="User Password" maxlength="50">
                <br />
            </div>
            <div class="card-footer text-muted">
                <button class="btn btn-success" onclick="UpdateEMailCredientials()">Update</button>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-white bg-danger text-center">
                Set Login status
            </div>
            <div class="card-body">
                <select style="cursor:pointer; width:100%" id="txtAvailablelogins" class="form-select js-example-basic-single" onchange="getLoginStatusByUserName(this)">
                    <option>Choose logins...</option>
                </select>
                <br />
                <hr />
                <label for="chkActive">Active :</label> <input style="cursor:pointer" type="checkbox" class="chkbox" id="chkActive" />
                <br />
                <br />
                <label for="chkBlock">Block :</label> <input type="checkbox" style="cursor:pointer" class="chkbox" id="chkBlock" />
                <br />
                <br />
                <input type="text" class="form-control" id="txtuserBlockmessage" placeholder="User block message" maxlength="100" style="display:none">
                <br />
            </div>
            <div class="card-footer text-muted">
                <button class="btn btn-success" onclick="UpdateLoginStatus()">Update</button>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-white bg-danger text-center">
                Encryption/Decryption Phrases
            </div>
            <div class="card-body">
                <br />
                <input type="text" class="form-control" id="txtPassPhrase" placeholder="Enter Any Phrase input" maxlength="1000">
                <br />
                <textarea class="form-control" id="txtPassPhraseOutput" readonly="readonly" style="max-height:80px"></textarea>

            </div>
            <div class="card-footer text-muted">
                <button class="btn btn-success" onclick="EncryptDecrypt()">Encrypt</button>
                <button class="btn btn-success" onclick="EncryptDecrypt(this)">Decrypt</button>
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card">
            <div class="card-header text-white bg-danger text-center">
                Page Access Rights/ Permissions (carefully assign permission for logins)
            </div>
            <div class="card-body">
                <select style="cursor:pointer" id="txtloginTypePermission" class="form-select" onchange="PermissionGrid(this)">
                    <option>Choose login type...</option>
                </select>
                <br />
                <table id="grid"></table>
            </div>
            <div class="card-footer text-muted">
                <button class="btn btn-success" onclick="UpdatePermission()" id="btnUpdatePermission" style="display:none">Update first [5] records</button>
                <button class="btn btn-success" onclick="UpdatePermission(true)">Update All</button>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(() => {
        $("#accordionFlushExample").hide();
        $('.js-example-basic-single').select2({ width: 'resolve' });
        TenantsSubscriptions();
        //ServerData("/WebAdminDashboard/GetAllTenants", "Post", null, (data) => {
        //    if (data && data.StatusCode == "1") {
        //        $('#txtTenant').html('');
        //        $('#txtTenant').append($("<option selected></option>").attr("value", "").text('Choose Tenant first'));
        //        $.each(data.Data, function (key, value) {
        //            $('#txtTenant').append($("<option></option>").attr("value", value.TenantUniqueKey).text(value.TenantDBName));
        //        });
        //    }
        //}, () => { });

        ServerData("/WebAdminDashboard/GetAllLoginType", "Post", null, (data) => {
            if (data && data.StatusCode == "1") {
                $('#txtloginType').html('');
                $('#txtloginTypePermission').html('');
                $('#txtloginType').append($("<option selected></option>").attr("value", "").text('Choose login type first'));
                $('#txtloginTypePermission').append($("<option selected></option>").attr("value", "").text('Choose login type first'));
                $.each(data.Data, function (key, value) {
                    $('#txtloginType').append($("<option></option>").attr("value", value.Type).text(value.TypeName));
                    $('#txtloginTypePermission').append($("<option></option>").attr("value", value.Type).text(value.TypeName));
                });
            }
        }, () => { });
        try {
            document.getElementsByTagName('footer')[0].hidden = true
        }
        catch { }
        setTimeout(() => { $('#txtSubscriptionENdDate').datepicker({ footer: true, modal: false, header: true, format: "dd-mm-yyyy" }); }, 500);
    });
    function OnTenantCHange(select) {
        if (select && select.value) {
            $("#accordionFlushExample").show();
            var loginObj = {
                "TenantUniqueKey": select.value.trim()
            }
            ServerData("/WebAdminDashboard/GetTenantDetails", "Post", loginObj, (data) => {
                if (data && data.StatusCode == "1") {
                    $("#txtTenantId").val(data.Data.id);
                    $("#txtTenantName").val(data.Data.TenantName);
                    $("#txtAddress").val(data.Data.TenantAddress);
                    $("#txtTenantMobile").val(data.Data.TenantMobile);
                    $("#txtTenantEMail").val(data.Data.TenantEmail);
                    $("#txtTenantLastRecharge").val(data.Data.RechargeAmount);
                    $("#txtTenantsubscriptionEndMessage").val(data.Data.SubscriptionEndMessage);
                    $("#txtSubscriptionENdDate").val(toShowSqlDateinUI(data.Data.SubscriptionEndDate));
                }
            }, () => { });

            GetUserUserName();
            GetEmailCredientials();
            getAvailablelogins();
        } else {
            $("#txtTenantId").val('');
            $("#txtTenantName").val('');
            $("#txtAddress").val('');
            $("#txtTenantMobile").val('');
            $("#txtTenantEMail").val('');
            $("#txtTenantLastRecharge").val('');
            $("#txtTenantsubscriptionEndMessage").val('');
            $("#txtSubscriptionENdDate").val(toShowSqlDateinUI(''));
            $("#accordionFlushExample").hide();
            $("#txtNewUserName").val('');
            $("#txtProfileName").val('');
            $("#txtUserPasssword").val('');
            $("#txtUserEMail").val('');
            $("#txtNewEMailFromAddress").val('');
            $("#txtUserEmailPasssword").val('');
            $("#txtuserBlockmessage").val('');
            $("#txtPassPhrase").val('');
            $('#txtAvailablelogins').empty();
            $('.chkbox').prop('checked', false);
            $('#txtPassPhraseOutput').val('');
            $('#txtloginTypePermission').html('');
            $('#txtloginType').html('');
        }
    }
    function PermissionGrid(typeID) {
        if (typeID && typeID.value) {
            var PassObj = {
                "userType": typeID.value.trim()
            }
            ServerData("/WebAdminDashboard/GetUserAccessTypePermission", "Post", PassObj, (data) => {
                if (data && data.StatusCode == "1") {
                    $('#grid').grid('destroy', true, true);
                    var IsActiveRender = function (value, record, $cell, $displayEl) {
                        let ctrl = record.IsActive ? "<div class='form-check form-switch' style='display: inline-block;'><input class='form-check-input' style='cursor:pointer'  checked type='checkbox' id='" + record.ID + "'></div>" : "<div class='form-check form-switch' style='display: inline-block;'><input class='form-check-input' style='cursor:pointer' type='checkbox' id='" + record.ID + "'></div>";

                        var $btn = $(ctrl).on('click', function () {
                            $('#grid').grid().getById($(this.children[0]).prop('id')).IsActive = $(this.children[0]).prop('checked') ? true : false;
                        });
                        $displayEl.empty().append($btn);
                    };

                    $('#grid').grid({
                        primaryKey: 'ID',
                        uiLibrary: "bootstrap4",
                        dataSource: data.Data,
                        iconsLibrary: 'fontawesome',
                        headerFilter: true,
                        columns: [
                            { field: 'ID', width: 1, hidden: true, filterable: false },
                            { field: 'Route', sortable: true },
                            { field: 'IsActive', title: 'Active?', width: 90, align: 'center', renderer: IsActiveRender, filterable: false }
                        ],
                        pager: { limit: 5, sizes: [5, 10, 20] }
                    });
                    if ($('#grid').grid()) {
                        $('#grid').grid().on('pageSizeChange', function (e, newSize) {
                            let visibleRecords = $("[data-role='record-last']")[0].innerText;
                            $("#btnUpdatePermission").html('Update [' + visibleRecords + "] records");
                        });
                    }
                } else {
                    SwalFire('Permission not getted', data.Error, 'error', null, () => { }, "");
                }
            }, () => { });
        } else {
            $('#grid').grid('destroy', true, true);
        }
    }

    function UpdatePermission(All) {
        if ($("#txtloginTypePermission") && $("#txtloginTypePermission").val()) {
            let loopCount = All ? $("#grid").grid().getAll(true).length : $("[data-role='record-last']")[0].innerText;
            if (loopCount > 0) {
                let records = $("#grid").grid().getAll(true);
                ServerData("/WebAdminDashboard/UpdatePermissions?TypeId=" + $("#txtloginTypePermission").val(), "Post", records.filter((rec, idx) => idx < parseInt(loopCount)), (data) => {
                    if (data && data.StatusCode == "1") {
                        SwalFire('Updated', 'Permission Updated', 'success', null, () => { }, "");
                        PermissionGrid(document.getElementById("txtloginTypePermission"));
                    } else {
                        SwalFire('Permission not updated', data.Error, 'error', null, () => { }, "");
                    }
                }, () => { });
            }
            else {
                SwalFire('No Data Available', 'There is no data available for updating permission', 'error', null, () => { }, "");
            }
        } else {
            SwalFire('Mendatory fields', 'Please select login type for updating permission', 'error', null, () => { }, "");
        }
    }

    function UpdateTenant(email) {
        if ($("#txtTenantId").val() && $("#txtTenant").val()) {
            var PassObj = {
                "id": $("#txtTenantId").val().trim(),
                "TenantName": $("#txtTenantName").val().trim(),
                "TenantAddress": $("#txtAddress").val().trim(),
                "TenantAddress": $("#txtAddress").val().trim(),
                "TenantEmail": $("#txtTenantEMail").val().trim(),
                "TenantMobile": $("#txtTenantMobile").val().trim(),
                "SubscriptionEndMessage": $("#txtTenantsubscriptionEndMessage").val().trim(),
                "RechargeAmount": $("#txtTenantLastRecharge").val().trim(),
                "SubscriptionEndDate": toSaveSqlDBDateFormat($("#txtSubscriptionENdDate").val().trim())
            }
            let urlhit = email ? "/WebAdminDashboard/SaveTenantDetailsMail" : "/WebAdminDashboard/SaveTenantDetails";
            ServerData(urlhit, "Post", PassObj, (data) => {
                if (data && data.StatusCode == "1") {
                    OnTenantCHange(document.getElementById('txtTenant'));
                    SwalFire('Tenant details Updated', 'Updated', 'success', null, () => { }, "");
                } else {
                    SwalFire('Tenant details not found', data.Error, 'error', null, () => { }, "");
                }
            }, () => { });
        } else {
            SwalFire('Tenant details not found', 'details not found, either you did not select any tenant or data not found for selected tenant', 'error', null, () => { }, "");
        }
    }
    function GetUserUserName(ovverride, email) {
        ServerData("/WebAdminDashboard/GetNextRecordForUserName", "Post", null, (data) => {
            if (data && data.StatusCode == "1") {

                if ($("#chkUseCustomUserName").prop('checked')) {
                    if ($("#txtNewUserName").val() && !$("#txtNewUserName").val().includes(document.getElementById('txtTenant').value.trim() + '-')) {
                        SwalFire('WrongUser Name format', 'user name should be like ' + document.getElementById('txtTenant').value.trim() + '-{your name}', 'error', null, () => { }, '');
                        return;
                    }
                } else {
                    $("#txtNewUserName").val(document.getElementById('txtTenant').value.trim() + '-' + data.Data);
                }
                if (ovverride) {
                    creatLoginOverride(email);
                }
            }
        }, () => { });
    }
    function CreateLogin(email) {
        if ($("#txtloginType").val() && $("#txtProfileName").val() && $("#txtUserPasssword").val() && $("#txtUserEMail").val()) {
            GetUserUserName(true, email);
        }
        else {
            SwalFire('Mandatory fields', 'all fields are mandatory for login create', 'error', null, () => { });
        }
    }
    function creatLoginOverride(email) {
        let UserObj = {
            "UserName": $('#txtNewUserName').val().trim(),
            "ProfileName": $('#txtProfileName').val().trim(),
            "Password": $('#txtUserPasssword').val().trim(),
            "Email": $('#txtUserEMail').val().trim(),
            "LoginType": $("#txtloginType").val(),
            "TenantToken": $("#txtTenant").val()
        }
        let hiturl = email ? "/WebAdminDashboard/CreateUserLogin?Isemail=1" : "/WebAdminDashboard/CreateUserLogin";
        ServerData(hiturl, "Post", UserObj, (data) => {
            GetUserUserName();
            if (data && data.StatusCode == "1") {
                SwalFire('Created', 'User login is created', 'success', null, () => { }, "");
            } else {
                SwalFire('User login can not be created', data.Error, 'error', null, () => { }, "");
            }

        }, () => { });
    }

    function GetEmailCredientials() {
        ServerData("/WebAdminDashboard/GetTenantEmailCredientials", "Post", null, (data) => {
            if (data && data.StatusCode == "1") {
                $("#txtNewEMailFromAddress").val(data.Data.UserName);
                $("#txtUserEmailPasssword").val(data.Data.Password);
            }
        }, () => { });
    }
    function UpdateEMailCredientials() {
        if ($("#txtNewEMailFromAddress").val() && $("#txtUserEmailPasssword").val()) {
            var loginObj = {
                "UserName": $("#txtNewEMailFromAddress").val().trim(),
                "Password": $("#txtUserEmailPasssword").val().trim()
            }
            ServerData("/WebAdminDashboard/UpdateTenantEMailCredientials", "Post", loginObj, (data) => {
                if (data && data.StatusCode == "1") {
                    GetEmailCredientials();
                    SwalFire('Tenant email credientials Updated', 'Updated', 'success', null, () => { }, "");
                } else {
                    SwalFire('Tenant email credientials not updated', data.Error, 'error', null, () => { }, "");
                }
            }, () => { });
        }
        else {
            SwalFire('Mandatory fields', 'all fields are mandatory for Emailcredientials Update', 'error', null, () => { });
        }
    }
    function getAvailablelogins() {
        $('#txtAvailablelogins').html('');
        ServerData("/WebAdminDashboard/GetTenantAvailablelogins", "Post", null, (data) => {
            if (data && data.StatusCode == "1") {
                $('#txtAvailablelogins').append($("<option selected></option>").attr("value", "").text('Choose Login first'));
                $.each(data.Data, function (key, value) {
                    $('#txtAvailablelogins').append($("<option></option>").attr("value", value.UserName).text(value.EmailId));
                });
            }
        }, () => { });
    }
    function getLoginStatusByUserName(userName) {
        $("#txtuserBlockmessage").val('');
        $('.chkbox').prop('checked', false);
        if (userName && userName.value.trim()) {
            let UserObj = {
                "UserName": userName.value.trim()
            }
            ServerData("/WebAdminDashboard/GetUserLoginStatus", "Post", UserObj, (data) => {
                if (data && data.StatusCode == "1") {
                    if (data.Data.Active) {
                        $("#chkActive").prop('checked', true);
                    }
                    if (data.Data.BlockLogin) {
                        $("#chkBlock").prop('checked', true);
                    }
                    $("#txtuserBlockmessage").val(data.Data.BlockMessage);
                }
            }, () => { });
        }
    }
    function UpdateLoginStatus() {
        if ($('#txtAvailablelogins').val()) {
            let UserObj = {
                "UserName": $('#txtAvailablelogins').val().trim(),
                "Active": $("#chkActive").prop('checked') ? 1 : 0,
                "BlockLogin": $("#chkBlock").prop('checked') ? 1 : 0
            }
            ServerData("/WebAdminDashboard/UpdateUserLoginStatus", "Post", UserObj, (data) => {
                if (data && data.StatusCode == "1") {
                    SwalFire('Updated', 'User status is updated', 'success', null, () => { }, "");
                } else {
                    SwalFire('User login status is updated', data.Error, 'error', null, () => { }, "");
                }
            }, () => { });
        } else {
            SwalFire('Mandatory fields', 'Please choose login first to set status', 'error', null, () => { });
        }
    }
    function EncryptDecrypt(decrypt) {
        if ($('#txtPassPhrase').val()) {
            let UserObj = {
                "phrase": $('#txtPassPhrase').val().trim(),
                "isDecrypt": decrypt ? true : false
            }
            ServerData("/WebAdminDashboard/GetEncryptDecryptionString", "Post", UserObj, (data) => {
                if (data && data.StatusCode == "1") {
                    $('#txtPassPhraseOutput').val(data.Data);
                } else {
                    $('#txtPassPhraseOutput').val(data.Error);
                }
            }, () => { });
        } else {
            SwalFire('Mandatory fields', 'Please enter input string to encrypt/decrypt', 'error', null, () => { });
        }
    }

    function TenantsSubscriptions() {
        $('#gridSubscptionEnd').grid('destroy', true, true);
        ServerData("/WebAdminDashboard/GetAllTenantSubscription", "Post", null, (data) => {
            $('#txtTenant').html('');
            $('#txtTenant').append($("<option selected></option>").attr("value", "").text('Choose Tenant first'));
            $.each(data.Data, function (key, value) {
                try {
                    value.SubscriptionEndDate = toShowSqlDateinUI(value.SubscriptionEndDate);
                    value.LastRechargeOn = toShowSqlDateinUI(value.LastRechargeOn);
                }
                catch (error) { console.error(error); }
                $('#txtTenant').append($("<option></option>").attr("value", value.id).text(value.TenantName));
            });

            $('#gridSubscptionEnd').grid({
                primaryKey: 'ID',
                uiLibrary: "bootstrap4",
                dataSource: data.Data,
                iconsLibrary: 'fontawesome',
                headerFilter: true,
                columns: [
                    { field: 'id', width: 50, sortable: true },
                    { field: 'TenantName', sortable: true },
                    { field: 'TenantEmail', sortable: true },
                    { field: 'TenantMobile', sortable: true },
                    { field: 'SubscriptionEndDate', sortable: true },
                    { field: 'LastRechargeOn', sortable: true },
                    { field: 'RechargeAmount', sortable: true }
                ],
                pager: { limit: 5, sizes: [5, 10, 20] },
                detailTemplate: '<div><table class="table table-striped table-sm table-responsive-sm"/></div>'
            });

            $('#gridSubscptionEnd').grid().on('detailExpand', function (e, $detailWrapper, id) {
                console.log(e, $detailWrapper, id);
                ServerData("/WebAdminDashboard/GetAllTenantSubscriptionHistory?tid=" + $('#gridSubscptionEnd').grid().get(id).id, "Post", null, (data) => {
                    if (data && data.StatusCode == "1") {
                        $.each(data.Data, function (key, value) {
                            try {
                                value.SubscptionStartFrom = toShowSqlDateinUI(value.SubscptionStartFrom);
                                value.SubscriptionEndAt = toShowSqlDateinUI(value.SubscriptionEndAt);
                                value.CreatedDate = toShowSqlDatetimeinUI(value.CreatedDate);
                            }
                            catch (error) { console.error(error); }
                        });
                        $detailWrapper.find('table').grid({
                            dataSource: data.Data,
                            autoGenerateColumns: true,
                            pager: { limit: 5 }
                        });
                    } else {
                        $detailWrapper.find('table').grid('destroy', true, true);
                    }
                });
            });
            $('#gridSubscptionEnd').grid().on('detailCollapse', function (e, $detailWrapper, id) {
                $detailWrapper.find('table').grid('destroy', true, true);
            });
        }, () => { });
    }

    function exportToExcel() {
        const table = document.getElementById("gridSubscptionEnd");
        const rows = table.querySelectorAll("tr");

        let csv = [];
        for (let i = 0; i < rows.length; i++) {
            let row = [], cols = rows[i].querySelectorAll("td, th");
            for (let j = 0; j < cols.length; j++)
                row.push(cols[j].innerText);
            csv.push(row.join(","));
        }

        const csvContent = "data:text/csv;charset=utf-8," + csv.join("\n");
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "AllTenant.csv");
        document.body.appendChild(link);
        link.click();
    }
</script>
